<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       default-autowire="byName"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                          ">
<!--配置扫描器-->
<!--    <context:component-scan base-package="org.lanqiao.dao.impl">-->

<!--    </context:component-scan>-->

    <!--配置数据库相关-事务-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/testdata"></property>
        <property name="username" value="root"></property>
        <property name="password" value="laotian"></property>
        <property name="maxActive" value="10"></property>
        <property name="maxIdle" value="6"></property>

    </bean>
<!--配置事务管理器txManager-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--增加对事物的支持-->
    <tx:annotation-driven transaction-manager="txManager"/>

    <!--该文件中产生的所有对象，被spring放入了一个称之为spring ioc容器的地方-->
<!--id:唯一标识符   class:指定类型，。。-->
    <bean id="student" class="org.lanqiao.entity.Student">
<!--property:该class所代表的类属性
    name:属性名
    value:属性值
-->
        <property name="stuNo" value="2"></property>
        <property name="stuName" value="ls"></property>
        <property name="stuAge" value="24"></property>
    </bean>
    <bean id="javaCourse" class="org.lanqiao.newinstance.JavaCourse"></bean>
    <bean id="htmlCourse" class="org.lanqiao.newinstance.HtmlCourse"></bean>

    <bean id="teacher" class="org.lanqiao.entity.Teacher" p:name="ww" p:age="25">
        <!--通过set方式赋值-->
        <!--<property name="name" value="zs"></property>
        <property name="age" value="23"></property>-->
        <!--通过构造器赋值-->
        <!--<constructor-arg value="ls"></constructor-arg>
        <constructor-arg value="24"></constructor-arg>-->


    </bean>
    <bean id="course" class="org.lanqiao.entity.Course" p:courseHour="300" p:courseName="hadoop" p:teacher-ref="teacher">
        <!--通过set方式赋值-->
        <!--<property name="courseName" value="java"></property>
        <property name="courseHour" value="200"></property>
        &lt;!&ndash;将teacher对象注入到course对象中&ndash;&gt;
        <property name="teacher" ref="teacher"></property>-->
        <!--通过构造器赋值-->
        <!--<constructor-arg value="c"></constructor-arg>
        <constructor-arg value="100"></constructor-arg>
        <constructor-arg ref="teacher"></constructor-arg>-->

    </bean>
    <bean id="collectionDemo" class="org.lanqiao.entity.AllCollectionType">
<!--        通过set方式赋值-->
        <property name="list">
            <list>
                <value>足球</value>
                <value>篮球</value>
                <value>乒乓球</value>
            </list>
        </property>
        <property name="array">
            <array>
                <value>足球1</value>
                <value>篮球1</value>
                <value>乒乓球1</value>
            </array>
        </property>
        <property name="set">
            <set>
                <value>足球2</value>
                <value>篮球2</value>
                <value>乒乓球2</value>
            </set>
        </property>
        <property name="map">
            <map>
                <entry>
                    <key>
                        <value>football</value>
                    </key>
                    <value>足球3</value>
                </entry>
                <entry>
                    <key>
                        <value>basketball</value>
                    </key>
                    <value>篮球3</value>
                </entry>
                <entry>
                    <key>
                        <value>pingpangball</value>
                    </key>
                    <value>乒乓球3</value>
                </entry>
            </map>
        </property>
        <property name="prpos">
            <props>
                <prop key="foot4"></prop>
                <prop key="basket4"></prop>
                <prop key="ppq4"></prop>
            </props>
        </property>
    </bean>
    <bean id="studentDao" class="org.lanqiao.dao.impl.StudentDaoImpl"></bean>


    <!--配置前置通知-->

    <!--addStudent()所在方法-->
    <bean id="studentService" class="org.lanqiao.service.impl.StudentServiceImpl">
        <property name="studentDao" ref="studentDao"></property>
    </bean>
    <!--”前置通知“类-->
    <!-- ========连接线的一方======== -->
    <bean id="LogBefore" class="org.lanqiao.aop.LogBefore">
    </bean>
    <bean id="LogAfter" class="org.lanqiao.aop.LogAfter"></bean>
    <bean id="LogException" class="org.lanqiao.aop.LogException"></bean>
    <bean id="LogAround" class="org.lanqiao.aop.LogAround"></bean>

    <!--将addStudent()和通知进行关联-->
    <aop:config>
        <!--配置切入点(在哪里执行通知)-->
        <!-- ========连接线的另一方======== -->
        <aop:pointcut id="poioncut" expression="execution(public void org.lanqiao.service.impl.StudentServiceImpl.deleteStudentByNo(int)) or execution(public void org.lanqiao.service.impl.StudentServiceImpl.addStudent(org.lanqiao.entity.Student))"/>
        <!--advisor:相当于链接切入点和切面的线-->
        <!-- ==========连接线========= -->

        <aop:advisor advice-ref="LogBefore" pointcut-ref="poioncut"/>
        <aop:advisor advice-ref="LogAfter" pointcut-ref="poioncut"></aop:advisor>
        <aop:advisor advice-ref="LogException" pointcut-ref="poioncut"></aop:advisor>
        <aop:advisor advice-ref="LogAround" pointcut-ref="poioncut"></aop:advisor>

    </aop:config>
    <!--开启注解对AOP的支持-->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <context:component-scan base-package="org.lanqiao.aop"></context:component-scan>

    <!--schema方式-->
    <!--    将准备转为通知的类纳入ioc容器-->
    <bean id="LogSchema" class="org.lanqiao.aop.LogSchema"></bean>
    <aop:config>
        <aop:pointcut id="pcShema" expression="execution(public * org.lanqiao.service.impl.StudentServiceImpl.addStudent(..))"/>
        <aop:aspect ref="LogSchema">
            <aop:before method="before" pointcut-ref="pcShema"/>
            <aop:after-returning method="afterReturning" returning="returnValue" pointcut-ref="pcShema"></aop:after-returning>
<!--            连接线：连接业务addStudent 和 通知before/afterReturning-->
            <aop:after-throwing method="whenException" throwing="e" pointcut-ref="pcShema"></aop:after-throwing>
            <aop:around method="around" pointcut-ref="pcShema"></aop:around>
        </aop:aspect>
    </aop:config>


</beans>
